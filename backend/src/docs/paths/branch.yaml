paths:
  /branches:
    get:
      tags: [Branches]
      summary: Get all branches for the organization
      description: Retrieves all branches for the authenticated user's organization
      security:
        - bearerAuth: [ ]
      parameters:
        - name: status
          in: query
          description: Filter branches by status
          schema:
            type: string
            enum: [active, inactive]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  branches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Branch'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'


  /branches/create:
    post:
      tags: [ Branches ]
      summary: Create a new branch (alternate endpoint)
      description: Alternate endpoint for creating a new branch (requires superadmin role)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchInput'
      responses:
        '201':
          description: Branch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'


  /branches/{branchId}:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        security:
          - bearerAuth: [ ]
        schema:
          type: string
          format: objectId

    get:
      tags: [Branches]
      summary: Get branch details
      description: Retrieves details of a specific branch
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Branches]
      summary: Update branch details
      description: Updates details of a specific branch (requires superadmin role or branch admin status)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchUpdateInput'
      responses:
        '200':
          description: Branch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Branches]
      summary: Delete branch
      description: Deletes a specific branch (requires superadmin role)
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Branch deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Branch deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /branches/{branchId}/statistics:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        security:
          - bearerAuth: [ ]
        schema:
          type: string
          format: objectId

    get:
      tags: [Branches]
      summary: Get branch statistics
      description: Retrieves statistics for a specific branch
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  employeeCount:
                    type: integer
                    example: 25
                  departmentCount:
                    type: integer
                    example: 3
                  geofenceCount:
                    type: integer
                    example: 5
                  attendance:
                    type: object
                    properties:
                      totalCheckIns:
                        type: integer
                      totalCheckOuts:
                        type: integer
                      onTime:
                        type: integer
                      late:
                        type: integer
                      latePercentage:
                        type: number
                        format: float
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /branches/{branchId}/employees:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        security:
          - bearerAuth: [ ]
        schema:
          type: string
          format: objectId

    get:
      tags: [Branches]
      summary: Get branch employees
      description: Retrieves employees assigned to a specific branch
      security:
        - bearerAuth: [ ]
      parameters:
        - name: status
          in: query
          description: Filter employees by status
          schema:
            type: string
            enum: [active, inactive, on_leave, terminated]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  employees:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [Branches]
      summary: Assign employee to branch
      description: Assigns an employee to a specific branch
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignEmployeeInput'
      responses:
        '200':
          description: Employee assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Employee assigned to branch successfully
                  employee:
                    $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /branches/{branchId}/employees/{employeeId}:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        security:
          - bearerAuth: [ ]
        schema:
          type: string
          format: objectId
      - name: employeeId
        in: path
        required: true
        description: The ID of the employee
        schema:
          type: string
          format: objectId

    delete:
      tags: [Branches]
      summary: Remove employee from branch
      description: Removes an employee from a specific branch
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Employee removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Employee removed from branch successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'





  /branches/{branchId}/admin:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        schema:
          type: string
          format: objectId

    post:
      tags: [ Branches ]
      summary: Assign admin to branch
      description: Assigns an admin to a branch (can promote existing employee, reassign admin, or create new admin)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: objectId
                  description: ID of existing user to assign (either userId or email must be provided)
                email:
                  type: string
                  format: email
                  description: Email of user to assign or create (either userId or email must be provided)
                firstName:
                  type: string
                  description: First name (required when creating new user)
                lastName:
                  type: string
                  description: Last name (required when creating new user)
              anyOf:
                - required: [ userId ]
                - required: [ email, firstName, lastName ]
      responses:
        '200':
          description: Admin assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Branch admin assigned successfully
                  data:
                    type: object
                    properties:
                      branch:
                        $ref: '#/components/schemas/Branch'
                      admin:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: objectId
                          firstName:
                            type: string
                          lastName:
                            type: string
                          email:
                            type: string
                            format: email
                          role:
                            type: string
                          status:
                            type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /branches/admin-options:
    get:
      tags: [ Branches ]
      summary: Get options for branch admin assignment
      description: Retrieves lists of available admins and branches in the organization
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      admins:
                        type: object
                        properties:
                          existingAdmins:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          potentialAdmins:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                      branches:
                        type: object
                        properties:
                          all:
                            type: array
                            items:
                              $ref: '#/components/schemas/Branch'
                          withAdmin:
                            type: array
                            items:
                              $ref: '#/components/schemas/Branch'
                          withoutAdmin:
                            type: array
                            items:
                              $ref: '#/components/schemas/Branch'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'


  /branches/{branchId}/departments:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        schema:
          type: string
          format: objectId

    get:
      tags: [ Branches ]
      summary: Get branch departments
      description: Retrieves departments assigned to a specific branch
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  departments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ Branches ]
      summary: Create department in branch
      description: Creates a new department within a specific branch
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Department name
                  example: "Sales Department"
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                  description: Department description
                  example: "Handles all sales activities"
                  maxLength: 500
                parentDepartmentId:
                  type: string
                  format: objectId
                  description: ID of parent department (if any)
                  example: "5f8a6d0d7e87a12345678901"
                managerId:
                  type: string
                  format: objectId
                  description: ID of department manager (if any)
                  example: "5f8a6d0d7e87a12345678902"
              required:
                - name
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Department created successfully
                  department:
                    $ref: '#/components/schemas/Department'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /branches/{branchId}/geofences:
    parameters:
      - name: branchId
        in: path
        required: true
        description: The ID of the branch
        schema:
          type: string
          format: objectId

    get:
      tags: [ Branches ]
      summary: Get geofences for a branch
      description: Retrieves all geofences associated with a specific branch
      security:
        - bearerAuth: [ ]
      parameters:
        - name: status
          in: query
          description: Filter geofences by status
          schema:
            type: string
            enum: [ active, inactive, archived ]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      geofences:
                        type: array
                        items:
                          $ref: '#/components/schemas/Geofence'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ Branches ]
      summary: Create geofence for branch
      description: Creates a new geofence for a specific branch
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Office Building"
                  description: Name of the geofence
                description:
                  type: string
                  example: "Main office building for employees"
                location:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [ "Point" ]
                      example: "Point"
                    coordinates:
                      type: array
                      items:
                        type: number
                      example: [ -122.4194, 37.7749 ]
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postalCode:
                          type: string
                radius:
                  type: number
                  minimum: 50
                  maximum: 10000
                  example: 100
                  description: Radius in meters
                type:
                  type: string
                  enum: [ office, site, warehouse, custom ]
                  example: "office"
                schedule:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    workDays:
                      type: array
                      items:
                        type: string
                        enum: [ Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday ]
                    workHours:
                      type: object
                      properties:
                        start:
                          type: string
                          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                          example: "09:00"
                        end:
                          type: string
                          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                          example: "17:00"
                settings:
                  type: object
                  properties:
                    entryNotification:
                      type: boolean
                    exitNotification:
                      type: boolean
                    autoCheckIn:
                      type: boolean
                    graceperiod:
                      type: number
                      minimum: 0
                      maximum: 60
              required:
                - name
                - location
                - radius
      responses:
        '201':
          description: Geofence created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Geofence created successfully"
                  data:
                    $ref: '#/components/schemas/Geofence'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'



